schema {
    query: Query
    mutation: Mutation
}

interface ReturnFields {
    success: Boolean!
    error: String
}

interface DataInterface {
    id_data: ID!
    capture: String!
    value: Float!
}

type Data implements DataInterface {
    id_data: ID!
    capture: String!
    value: Float!
    fk_device: Int!
}

type DataResult implements ReturnFields {
    success: Boolean!
    error: String
    data: [Data!]
}

type MeasuresResult implements ReturnFields {
    success: Boolean!
    error: String
    data: Float
}

type InsertResult implements ReturnFields {
    success: Boolean!
    error: String
}

enum DeviceType {
    TEMPERATURE,
    HUMIDITY
}

type Query {
    getAll(device_type: DeviceType!): DataResult!
    getMax(device_type: DeviceType!): DataResult!
    getMin(device_type: DeviceType!): DataResult!
    getToday(device_type: DeviceType!): DataResult!
    getLatest(device_type: DeviceType!): DataResult!
    getBetween(begin_date: String!, end_date: String!, device_type: DeviceType!): DataResult!
    getAverageBetween(begin_date: String!, end_date: String!, device_type: DeviceType!): MeasuresResult!
    # getAverageBetween =>  getTodayAverage
    # getMaxBetween => getTodayMax
    # getMinBetween => getTodayMin
}

type Mutation {
    addData(value: Float!, device_type: DeviceType!): InsertResult!
}